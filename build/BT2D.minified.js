/*! 2DBeam_Tracer 2016-06-18 */
(function(){BT2D.BeamTracerScene=function(){function a(){this._surfaceSet=new BT2D.LinearSurfaceSet,this._lightFrustrumSet=new BT2D.LightFrustrumSet,this.frustrumsNeedUpdate=!0,this.surfacesChanged=!0,this._initCamera(),this._frustrumTracer=new BT2D.FrustrumTracer,traceFrustrums()}return a.prototype._initCamera=function(){var a,b;return b=100,a=100,this._camera=new THREE.OrthographicCamera(b/-2,b/2,a/2,a/-2,1,1e3),this._camera.position.z=2},a.prototype.addSurface=function(a){return this._surfaceSet.addSurface(a),this.surfacesChanged=!0},a.prototype.traceFrustrums=function(){return this.surfacesChanged?(this._frustrumTracer.traceFrustrums(this._surfaceSet,this._lightFrustrumSet),this.surfacesChanged=!1):void 0},a.prototype.frustrumsToTriangles=function(a){return a.clearTriangles(),this._lightFrustrumSet.convertToTriangles(a),this.frustrumsNeedUpdate=!1},a.prototype.getCamera=function(){return this._camera},a}()}).call(this),function(){BT2D.LightFrustrumSet=function(){function a(){this._set=[]}return a.prototype.addLightFrustrum=function(a){return this._set.push(a)},convertToTriangles(frustrumDrawer)(function(){var a,b,c,d,e;for(d=this._set,e=[],b=0,c=d.length;c>b;b++)a=d[b],e.push(a.convertToTriangles);return e}),a.prototype.clearAll=function(){return this._set=[]},a}()}.call(this),function(){BT2D.SurfaceSet=function(){function a(){this._set=[],this._emmissive_set=[]}return a.prototype.addSurface=function(a){return this._set.push(a),a.isEmmissiveSource?this._emmissive_set.push(a):void 0},a.prototype.emitSourceFrustrums=function(){var a;return function(){var b,c,d,e;for(d=this._emmissive_set,e=[],b=0,c=d.length;c>b;b++)a=d[b],e.push(a.emitSourceFrustrums());return e}.call(this)},a.prototype.intersectRay=function(a,b){var c,d,e,f,g;for(e=!1,f=this._set,c=0,d=f.length;d>c;c++)g=f[c],e|=g.intersectRay(a,b);return e},a}()}.call(this),function(){BT2D.FrustrumDrawer=function(){function a(){this._geometry=new THREE.Geometry,this._scene=new THREE.Scene,this._material=new THREE.MeshBasicMaterial({vertexColors:THREE.VertexColors,side:THREE.DoubleSide,transparent:!0,blending:THREE.AdditiveBlending,depthTest:!1}),this._mesh=new THREE.Mesh(this._geometry,this._material),this._scene.add(this._mesh)}return a.prototype.addTriangle=function(a,b,c,d,e,f){var g,h,i,j;return h=this._geometry.vertices.length,i=h+1,j=h+2,this._geometry.vertices.push(a,b,c),g=new THREE.Face3(h,i,j),g.vertexColors=[d,e,f],this._geometry.faces.push(g),this._geometry.verticesNeedUpdate=!0,this._geometry.elementsNeedUpdate=!0},a.prototype.clearTriangles=function(){return this._geometry.faces=[],this._geometry.vertices=[],this._geometry.verticesNeedUpdate=!0,this._geometry.elementsNeedUpdate=!0},a.prototype.render=function(a,b){return b.frustrumsNeedUpdate?(b.frustrumsToTriangles(this),a.render(this._scene,b.getCamera())):void 0},a}()}.call(this),function(){BT2D.LightFrustrum=function(){function a(a,b,c,d,e){this.frustrum=a,this.spectrum1=b,this.spectrum2=c,this.spectrum3=d,this.spectrum4=e}return a.prototype.convertToTriangles=function(a){var b,c,d,e,f,g,h,i;return f=frustrum.getStart1(),g=frustrum.getStart2(),h=frustrum.getEnd2(),i=frustrum.getEnd1(),b=this.spectrum1.toColor(),c=this.spectrum2.toColor(),d=this.spectrum3.toColor(),e=this.spectrum4.toColor(),a.addTriangle(f,g,h,b,c,d),a.addTriangle(f,g,h,b,c,d)},a}()}.call(this),function(){BT2D.Material=function(){function a(){this.emmisive=new BT2D.spectrum}return a.prototype.isEmmissiveSource=function(){return!this.emmissive.imperceptible},a}()}.call(this),function(){BT2D.Spectrum=function(){function a(a,b,c){this.red=a,this.green=b,this.blue=c}return a.prototype.imperceptible=function(){return this.red+this.green+this.blue<.01},a.prototype.toColor=function(){return new THREE.Color(red,green,blue)},a.prototype.mult=function(a){return new BT2D.Spectrum(this.red*a.red,this.green*a.green,this.blue*a.blue)},a.prototype.multScalar=function(a){return new BT2D.Spectrum(this.red*a,this.green*a,this.blue*a)},a.prototype.add=function(a){return new BT2D.Spectrum(this.red+a.red,this.green+a.green,this.blue+a.blue)},a}()}.call(this),function(){BT2D.Surface=function(){function a(a,b){this.geometry=a,this.material=b}return a.prototype.isEmmissiveSource=function(){return material.isEmmissiveSource},emitSourceFrustrums()(function(){var a,b,c;return this.geometry(typeof BT2D.Line)?(b=line.getP1(),c=line.getP2(),a=line.getNormal(),new BT2D.Frustrum(b,c,a,a)):console.log("ERROR: NON-line emmissive surfaces are not supported yet.")}),emitScatteringFrustrums(incomingFrustrum)(function(){}),intersectRay(ray,intersection)(function(){return geometry.intersectRay(ray,intersection)}),a}()}.call(this),function(){var a=function(a,c){function d(){this.constructor=a}for(var e in c)b.call(c,e)&&(a[e]=c[e]);return d.prototype=c.prototype,a.prototype=new d,a.__super__=c.prototype,a},b={}.hasOwnProperty;BT2D.RadialTestScene=function(b){function c(){}return a(c,b),c}(BT2D.BeamTracerScene)}.call(this),function(){BT2D.FrustrumTracer=function(){function a(){}return a.prototype.traceFrustrums=function(a,b){var c,d,e,f,g,h,i,j,k;for(b.clearAll(),e=a.emitSourceFrustrums(),d=0,g=e.length;g>d;d++)c=e[d],j=this.traceFrustrum(c,a);for(k=[],f=0,h=j.length;h>f;f++)i=j[f],k.push(b.addLightFrustrum);return k},traceFrustrum(frustrum,surfaceSet),a}()}.call(this);