// Generated by CoffeeScript 1.10.0

/*
    Material

    Written by Bryce Summers on 6/18/2016.
    
    Purpose:
     - This class specifies the Bdrf and other light transport properties of a surface.
     - In otherwords, this class specifies how to an input frustrum with an associated spectrum
       gets transformed into outgoing spectrums.
       
     - Every piece of geometry needs to be associated with a material in order to interact with spectrum frustrums.
     
      * NOTE: Materials should for the most part be read only

     Materials will from hereafter be mostly used through the interface of the transformSpectrums function.

     I am opting for a default constructor that supplies the fully absorptive material and users can gradually
     enable all spectrum transformations that they desire.
 */

(function() {
  BT2D.Material = (function() {
    function Material() {
      var NONE;
      NONE = new BT2D.Spectrum(0.0, 0.0, 0.0);
      this.emissive = NONE;
      this.specular_red = NONE;
      this.specular_green = NONE;
      this.specular_blue = NONE;
    }

    Material.prototype.setEmissive = function(s) {
      return this.emissive = s;
    };

    Material.prototype.setSpecularRed = function(s) {
      return this.specular_red = s;
    };

    Material.prototype.setSpecularGreen = function(s) {
      return this.specular_green = s;
    };

    Material.prototype.setSpecularBlue = function(s) {
      return this.specular_blue = s;
    };

    Material.prototype.isEmissiveSource = function() {
      return !this.emissive.imperceptible();
    };

    Material.prototype.getEmmissiveSourceSpectrum = function() {
      return this.emissive.clone();
    };

    Material.prototype.transformSpectrums = function(spectrum_1, spectrum_2, incoming_dir1, incoming_dir2) {
      spectrum_1 = this._transformSpectrum(spectrum_1);
      spectrum_2 = this._transformSpectrum(spectrum_2);
      return [spectrum_1, spectrum_2];
    };

    Material.prototype._transformSpectrum = function(s) {
      var blue, green, red;
      red = s.mult(this.specular_red).getTotalEnergy();
      green = s.mult(this.specular_green).getTotalEnergy();
      blue = s.mult(this.specular_blue).getTotalEnergy();
      return new BT2D.Spectrum(red, green, blue);
    };

    return Material;

  })();

}).call(this);
