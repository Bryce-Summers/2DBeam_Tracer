// Generated by CoffeeScript 1.10.0

/*
    Surface

    Written by Bryce Summers on 6/18/2016.
    
    Purpose:
        This class describes a physical surface that associates a geoemtry with a material.
         - The geometry describes an embedding in space.
         - The material describes the light tranport properties of this surface.
 */

(function() {
  BT2D.Surface = (function() {
    function Surface(geometry, material) {
      this.geometry = geometry;
      this.material = material;
    }

    Surface.prototype.isEmissiveSource = function() {
      return this.material.isEmissiveSource();
    };

    Surface.prototype.emitSourceFrustrums = function() {
      var dir, frustrum, initial_spectrum, lightFrustrum, line, p1, p2;
      if (this.geometry instanceof BT2D.Line) {
        line = this.geometry;
        p1 = line.getP1();
        p2 = line.getP2();
        dir = line.getNormal().multiplyScalar(-1);
        frustrum = new BT2D.Frustrum(p1, p2, dir, dir);
        initial_spectrum = this.material.getEmmissiveSourceSpectrum();
        lightFrustrum = new BT2D.LightFrustrum(frustrum, initial_spectrum, initial_spectrum);
        return [lightFrustrum];
      }
      return console.log("ERROR: NON-line emmissive surfaces are not supported yet.");
    };

    Surface.prototype.emitScatteringFrustrums = function(incomingLightFrustrum, intersection) {
      var end1, end2, incoming_dir1, incoming_dir2, input_frustrum, lightFrustrum, line, outgoing_dir1, outgoing_dir2, scattered_frustrum, spectrum_1, spectrum_2;
      input_frustrum = incomingLightFrustrum.frustrum;
      if (this.geometry instanceof BT2D.Line) {
        spectrum_1 = incomingLightFrustrum.getEndSpectrum2();
        spectrum_2 = incomingLightFrustrum.getEndSpectrum1();
        if (spectrum_1.imperceptible() && spectrum_2.imperceptible()) {
          return [];
        }
        incoming_dir1 = input_frustrum.dir2;
        incoming_dir2 = input_frustrum.dir1;
        end1 = input_frustrum.getEnd2();
        end2 = input_frustrum.getEnd1();
        line = this.geometry;
        outgoing_dir1 = line.getPerfectSpecularReflectionDirection(incoming_dir1);
        outgoing_dir2 = line.getPerfectSpecularReflectionDirection(incoming_dir2);
        scattered_frustrum = new BT2D.Frustrum(end1, end2, outgoing_dir1, outgoing_dir2);
        lightFrustrum = new BT2D.LightFrustrum(scattered_frustrum, spectrum_1, spectrum_2);
        return [lightFrustrum];
      }
      return console.log("ERROR: Non-line surfaces are currently not supported for light scattering.");
    };

    Surface.prototype.intersectRay = function(ray, intersection, min_time) {
      if (this.geometry.intersectRay(ray, intersection, min_time)) {
        intersection.surface = this;
        return true;
      } else {
        return false;
      }
    };

    return Surface;

  })();

}).call(this);
