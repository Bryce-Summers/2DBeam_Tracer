// Generated by CoffeeScript 1.10.0

/*
    Radial Test Scene Generator object.

    Written by Bryce Summers on 6/18/2016.
    
    Purpose:
     - This class generates a new Radia Test Scene to be used as an example scene for testing the frustrum renderer.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BT2D.RadialTestScene = (function(superClass) {
    extend(RadialTestScene, superClass);

    function RadialTestScene(n) {
      var blueSpectrum, fullIntensitySpectrum, noIntensitySpectrum, redSpectrum;
      RadialTestScene.__super__.constructor.call(this);
      fullIntensitySpectrum = new BT2D.Spectrum(1.0, 1.0, 1.0);
      noIntensitySpectrum = new BT2D.Spectrum(0.0, 0.0, 0.0);
      blueSpectrum = new BT2D.Spectrum(0.0, 0.0, 1.0);
      redSpectrum = new BT2D.Spectrum(1.0, 0.0, 0.0);
      this.emmissiveSourceMaterial = new BT2D.Material();
      this.emmissiveSourceMaterial.setEmissive(fullIntensitySpectrum);
      this.absorptiveSourceMaterial = new BT2D.Material();
      this.specularSourceMaterial = new BT2D.Material();
      this.specularSourceMaterial.setSpecularBlue(redSpectrum);
      this.createScene(n);
    }

    RadialTestScene.prototype.createScene = function(n) {
      this.clearSurfaces();
      this.createBasicTestScene(n);
      console.log("Creating scene!");
      this.createViewBoundaryWalls();
      this.generateBSP();
      return this.traceFrustrums();
    };

    RadialTestScene.prototype.createPolarTestScene = function(n) {
      var i, inc, j, ref, ref1, results;
      inc = Math.PI * 2 / n;
      results = [];
      for (i = j = 0, ref = Math.PI * 2, ref1 = inc; ref1 > 0 ? j < ref : j > ref; i = j += ref1) {
        results.push(this.createPolarSurface(this.specularSourceMaterial, 50, i + inc * 3 / 2, i + inc / 2));
      }
      return results;
    };

    RadialTestScene.prototype.createRandomScene = function(n) {
      var angle, i, j, length, offset, ref, results, v1, v2;
      results = [];
      for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        v1 = this.randomVector(50);
        length = 5;
        angle = Math.random() * Math.PI * 2;
        offset = new THREE.Vector3(5 * Math.cos(angle), 5 * Math.sin(angle), 0);
        v2 = v1.clone().add(offset);
        results.push(this.createSurface(this.specularSourceMaterial, v1, v2));
      }
      return results;
    };

    RadialTestScene.prototype.randomVector = function(max) {
      var x, y, z;
      x = Math.random() * max * 2 - max;
      y = Math.random() * max * 2 - max;
      z = 0;
      return new THREE.Vector3(x, y, z);
    };

    RadialTestScene.prototype.createBasicTestScene = function(n) {

      /*
      @createSurface(@emmissiveSourceMaterial,
          new THREE.Vector3( -5, -35 + 1.01*n, 0),
          new THREE.Vector3( 5 - n*1.07, -30, 0)
          )
       */

      /*
       * A wall in the middle of the screen.
      @createSurface(@specularSourceMaterial,
          new THREE.Vector3( -10, -1, 0)
          new THREE.Vector3(  10, 3, 0))
      
       * A wall in the middle of the screen.
      @createSurface(@absorptiveSourceMaterial,
          new THREE.Vector3(  -10, -1, 0)
          new THREE.Vector3(   -5, 5, 0))
       */
      this.createSurface(this.specularSourceMaterial, new THREE.Vector3(-10, 20, 0), new THREE.Vector3(20, -10, 0));
      return this.createSurface(this.specularSourceMaterial, new THREE.Vector3(-20, 10, 0), new THREE.Vector3(1, 5, 0));
    };

    RadialTestScene.prototype.createPolarSurface = function(material, radius, angle1, angle2) {
      var geometry, p1, p2, surface;
      p1 = new THREE.Vector3(radius * Math.cos(angle1), radius * Math.sin(angle1), 0);
      p2 = new THREE.Vector3(radius * Math.cos(angle2), radius * Math.sin(angle2), 0);
      geometry = new BT2D.Line(p2, p1);
      surface = new BT2D.Surface(geometry, material);
      return this.addSurface(surface);
    };

    RadialTestScene.prototype.createViewBoundaryWalls = function() {
      var offset, x0, x1, y0, y1;
      x0 = -50.01;
      x1 = 50.01;
      y0 = -50.01;
      y1 = 50.01;
      offset = 10;
      this.createSurface(this.absorptiveSourceMaterial, new THREE.Vector3(x0 - offset, y0, 0), new THREE.Vector3(x1 + offset, y0, 0));
      this.createSurface(this.absorptiveSourceMaterial, new THREE.Vector3(x0 - offset, y1, 0), new THREE.Vector3(x1 + offset, y1, 0));
      this.createSurface(this.absorptiveSourceMaterial, new THREE.Vector3(x0, y0 - offset, 0), new THREE.Vector3(x0, y1 + offset, 0));
      return this.createSurface(this.absorptiveSourceMaterial, new THREE.Vector3(x1, y0 - offset, 0), new THREE.Vector3(x1, y1 + offset, 0));
    };

    return RadialTestScene;

  })(BT2D.BeamTracerScene);

}).call(this);
