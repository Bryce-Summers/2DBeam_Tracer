// Generated by CoffeeScript 1.10.0

/*
    SurfaceSet

    Written by Bryce Summers on 6/18/2016.
    
    Purpose:
     - This class represents a set of Surfaces embedded in a plane.
     TODO : Think about whether I need to decompose this into linear vs. non-linear surfaces.
     - This class maintains the set through a spatial partitioning of the plane that allows for:
        - efficient ray - linearSurfaceSet intersections through spatial partitioning.
        - efficient frustrum - linearSurfaceSet intersections.
 */

(function() {
  BT2D.SurfaceSet = (function() {
    function SurfaceSet() {
      this._set = [];
      this._emissive_set = [];
    }

    SurfaceSet.prototype.addSurface = function(surface) {
      this._set.push(surface);
      if (surface.isEmissiveSource()) {
        return this._emissive_set.push(surface);
      }
    };

    SurfaceSet.prototype.clearSurfaces = function() {
      this._set = [];
      return this._emissive_set = [];
    };

    SurfaceSet.prototype.emitSourceFrustrums = function() {
      var emmitted_frustrum_set, frustrum, i, j, len, len1, output, ref, surface;
      output = [];
      ref = this._emissive_set;
      for (i = 0, len = ref.length; i < len; i++) {
        surface = ref[i];
        emmitted_frustrum_set = surface.emitSourceFrustrums();
        for (j = 0, len1 = emmitted_frustrum_set.length; j < len1; j++) {
          frustrum = emmitted_frustrum_set[j];
          output.push(frustrum);
        }
      }
      return output;
    };

    SurfaceSet.prototype.intersectRay = function(ray, intersection, min_time) {
      var i, len, out, ref, surface;
      out = false;
      ref = this._set;
      for (i = 0, len = ref.length; i < len; i++) {
        surface = ref[i];
        out |= surface.intersectRay(ray, intersection, min_time);
      }
      return out;
    };

    SurfaceSet.prototype.intersectFrustrum = function(frustrum, intersection_list) {
      console.log("Implement Me!");
      debugger;
    };

    return SurfaceSet;

  })();

}).call(this);
