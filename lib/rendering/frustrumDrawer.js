// Generated by CoffeeScript 1.10.0

/*
    The Frustrum drawer class.

    Written by Bryce Summers on 6/18/2016.
    Purpose:
     - This class speaks to Three.js
     - Renders all of the light frustrums to the screen as attribute interpolated triangles.
       where the attributes are the light intensities, represented by THREE.js Colors.
       
    Implementation Details:
     - We draw all of the attribute interpolated triangles with additive blending to sum up the total light contributions at any given point.
       since additive blending is commutative, we don't need to worry about z-fighting,
       even though all of the triangle will be drawn at the same depth.
     - We draw both front and back faces so that we don't need to waste time properly orienting the triangles.
 */

(function() {
  BT2D.FrustrumDrawer = (function() {
    function FrustrumDrawer() {
      this._geometry = new THREE.Geometry();
      this._scene = new THREE.Scene();
      this._material = new THREE.MeshBasicMaterial({
        vertexColors: THREE.VertexColors,
        side: THREE.DoubleSide,
        transparent: true,
        blending: THREE.AdditiveBlending,
        depthTest: false
      });
      this._mesh = new THREE.Mesh(this._geometry, this._material);
      this._scene.add(this._mesh);
    }

    FrustrumDrawer.prototype.addTriangle = function(v1, v2, v3, c1, c2, c3) {
      var face, i0, i1, i2;
      i0 = this._geometry.vertices.length;
      i1 = i0 + 1;
      i2 = i0 + 2;
      this._geometry.vertices.push(v1, v2, v3);
      face = new THREE.Face3(i0, i1, i2);
      face.vertexColors = [c1, c2, c3];
      this._geometry.faces.push(face);
      return this._geometry.elementsNeedUpdate = true;
    };

    FrustrumDrawer.prototype.clearTriangles = function() {
      this.resetGeometryBuffer();
      this._geometry.faces = [];
      return this._geometry.vertices = [];
    };

    FrustrumDrawer.prototype.resetGeometryBuffer = function() {
      this._geometry.dispose();
      this._geometry = new THREE.Geometry();
      return this._mesh.geometry = this._geometry;
    };

    FrustrumDrawer.prototype.render = function(renderer, tracerScene) {
      if (tracerScene.frustrumsNeedUpdate) {
        tracerScene.frustrumsToTriangles(this);
        console.log(this._scene);
        return renderer.render(this._scene, tracerScene.getCamera());
      }
    };

    return FrustrumDrawer;

  })();

}).call(this);
