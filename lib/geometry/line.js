// Generated by CoffeeScript 1.10.0

/*
    Line object.

    Written by Bryce Summers on 6/18/2016.
    
    Purpose:
     - This class represents 2D line's in a purely geometric sense.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BT2D.Line = (function(superClass) {
    extend(Line, superClass);

    function Line(_p1, _p2) {
      var temp;
      Line.__super__.constructor.call(this);
      this._p1 = _p1.clone();
      this._p2 = _p2.clone();
      this._offset = this._p2.clone().sub(this._p1);
      this._dir = this._offset.clone().normalize();
      this._normal = this._dir.clone();
      temp = this._normal.x;
      this._normal.x = -this._normal.y;
      this._normal.y = temp;
    }

    Line.prototype.getNormal = function() {
      return this._normal.clone();
    };

    Line.prototype.getP1 = function() {
      return this._p1.clone();
    };

    Line.prototype.getP2 = function() {
      return this._p2.clone();
    };

    Line.prototype.getPerfectSpecularReflectionDirection = function(incoming_direction) {
      var normal, normal_proj, normal_proj_mag;
      normal = this._normal;
      normal_proj_mag = incoming_direction.dot(normal);
      normal_proj = normal.clone().multiplyScalar(normal_proj_mag);
      if (normal_proj_mag < 0) {
        normal_proj.multiplyScalar(-1);
      }
      return incoming_direction.clone().sub(normal_proj.multiplyScalar(2));
    };

    Line.prototype.intersectRay = function(ray, intersection) {

      /*
      First of all, here is the intersection math.
      u = ((bs.y - as.y) * bd.x - (bs.x - as.x) * bd.y) / (bd.x * ad.y - bd.y * ad.x)
      v = ((bs.y - as.y) * ad.x - (bs.x - as.x) * ad.y) / (bd.x * ad.y - bd.y * ad.x)
      Factoring out the common terms, this comes to:
      dx = bs.x - as.x
      dy = bs.y - as.y
      det = bd.x * ad.y - bd.y * ad.x
      u = (dy * bd.x - dx * bd.y) / det
      v = (dy * ad.x - dx * ad.y) / det
       */
      var ad, as, bd, bs, det, dx, dy, u, v;
      as = this._p1;
      bs = ray.getOrigin();
      ad = this._offset;
      bd = ray.getDirection();
      dx = bs.x - as.x;
      dy = bs.y - as.y;
      det = bd.x * ad.y - bd.y * ad.x;
      if (Math.abs(det) < .0001) {
        return false;
      }
      u = (dy * bd.x - dx * bd.y) / det;
      v = (dy * ad.x - dx * ad.y) / det;
      if (u < -0 || u > 1) {
        return false;
      }
      if (v <= .000001) {
        return false;
      }
      if (v > 0 && (intersection.time === null || intersection.time > v)) {
        intersection.time = v;
      }
      return true;
    };

    return Line;

  })(BT2D.Geometry);

}).call(this);
